using SpecExplorer2;

config Main
{
    switch GeneratedTestPath = "..\\SpecExplorer2.TestSuite";

    action abstract static void TFTPClientAdapter.initialize();
    action abstract static void TFTPClientAdapter.canGetExit(int len);
    action abstract static void TFTPClientAdapter.canPutExit(int len);
    action abstract static void TFTPClientAdapter.sendACK();
    action abstract static void TFTPClientAdapter.receiveACK();
    action abstract static void TFTPClientAdapter.sendReadRequest();
    action abstract static void TFTPClientAdapter.sendWriteRequest();
    action abstract static void TFTPClientAdapter.receiveDataBlock();
    action abstract static void TFTPClientAdapter.sendDataBlock();

    action abstract static void TFTPClientAdapter.checker(int tftpClientState);
}

config ParameterCombinationConfig : Main
{
    action abstract static void TFTPClientAdapter.canGetExit(int len)
    where {. Condition.In(len, 511, 521); .};

    action abstract static void TFTPClientAdapter.canPutExit(int len)
    where {. Condition.In(len, 511, 521); .};
}

machine BaseMachine() : Main
{
    construct model program from ParameterCombinationConfig
    where scope = "SpecExplorer2.ModelProgram"
}

machine GetMachineWithCheckers() : Main
{
    initialize; sendReadRequest; (receiveDataBlock; sendACK; TFTPClientAdapter.canGetExit;)* ||| checker*
}

machine GetMachine() : Main
{
    GetMachineWithCheckers || BaseMachine
}




machine PutMachine() : ParameterCombinationConfig
{
    initialize; sendWriteRequest; (receiveACK; sendDataBlock; TFTPClientAdapter.canPutExit;)*
}

machine GetTestSuite() : Main where ForExploration = true, TestEnabled = true
{
    construct test cases where Strategy = "ShortTests" for GetMachine()
}

machine PutTestSuite() : Main where ForExploration = true, TestEnabled = true
{
    construct test cases where Strategy = "ShortTests" for PutMachine()
}